(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.uiValidations = mod.exports;
  }
})(this, function (exports) {
  "use strict";

  function getId(a) {
    if (a.id) {
      return a.id;
    };
    a.id = a.name;
    return a.name;
  }

  function addMsg(a, b, c) {
    var d = newElement("label", { id: getId(a) + "_msg", for: getId(a), class: "field-validation " + c }, b);
    a.afterEnd(d);
    Positionizer.setRelativePosition(a, d, "bottom-left");
    a.addClass(c);
  }

  function removeMsg(a) {
    var b = getId(a) + "_msg";
    var c = qsi(b);
    if (c !== null) {
      c.remove(c);
    }
    a.class("-info -warning -error");
  }

  function cleanErrors() {
    qsa(".field-validation").remove();
    qsa(".error").class("-info -warning -error");
  }

  function addError(a, b) {
    addMsg(a, b, "error");
  }

  function addWarning(a, b) {
    addMsg(a, b, "warning");
  }

  function addInfo(a, b) {
    addMsg(a, b, "info");
  }

  var dico = {
    required: function () {
      return !validators.isEmpty(...arguments);
    }
  };

  function validate(a) {
    var b = 0;
    cleanErrors();
    for (var c of a) {
      var d = qsi(c.field);
      if (d === null) {
        d = qsn(c.field);
      }
      if (d !== null) {
        var e = d.val();
        for (var f of c.rules) {
          if (f.type === "custom") {
            if (!f.fn(e)) {
              addError(d, f.msg);
              b++;
              break;
            }
          } else if (dico[f.type]) {
            var g = dico[f.type];
            if (!g(e)) {
              addError(d, f.msg);
              b++;
              break;
            }
          } else {
            console.error("rule " + f.type + " undefined");
          }
        }
      } else {
        console.error("field " + c.field + " not found");
      }
      return b === 0;
    }
  }
  exports.addMsg = addMsg;
  exports.addInfo = addInfo;
  exports.addWarning = addWarning;
  exports.addError = addError;
  exports.removeMsg = removeMsg;
  exports.validate = validate;
  exports.cleanErrors = cleanErrors;
});