(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.uiValidations = mod.exports;
  }
})(this, function (exports) {
  "use strict";

  var config = {
    placement: "bottom-left",
    MSGS: {
      required: "Le champ [[name]] est requis",
      minlength: "Le champ [[name]] doit comporter au moins [[]] caract√®res"
    }
  };

  function getId(a) {
    if (a.id) {
      return a.id;
    };
    a.id = a.name;
    return a.name;
  }

  function addMsg(a, b, c) {
    if (config.placement === "tooltip") {
      a.oldTitle = a.title;
      a.title = b;
    } else {
      var d = newElement("label", { id: getId(a) + "_msg", for: getId(a), class: "field-validation " + c }, b);
      a.afterEnd(d);
      Positionizer.setRelativePosition(a, d, "bottom-left");
    }
    a.addClass(c);
  }

  function removeMsg(a) {
    var b = getId(a) + "_msg";
    var c = qsi(b);
    if (c !== null) {
      c.remove(c);
    }
    a.class("-info -warning -error");
  }

  function cleanErrors() {
    qsa(".field-validation").remove();
    var a = qsa(".error");
    a.class("-info -warning -error");
    a.attr("title", "");
  }

  function addError(a, b) {
    addMsg(a, b, "error");
  }

  function addWarning(a, b) {
    addMsg(a, b, "warning");
  }

  function addInfo(a, b) {
    addMsg(a, b, "info");
  }

  function addErrorRule(a, b) {
    var c = getMsg(a, b);
    addError(a, c);
  }

  function getMsg(a, b) {
    if (b.msg) {
      return b.msg;
    };
    var c = "";
    var d = qs("[for='" + a.name + "']");
    if (config.MSGS[b.type]) {
      c = config.MSGS[b.type];
    } else {
      c = "error";
    }
    var e = d != null ? d.text() : "";
    c = c.replace("[[name]]", e);
    return c;
  }

  function not(a) {
    return !a(arguments[1], arguments[2]);
  }

  validators.required = function () {
    return not(validators.isEmpty, ...arguments);
  };

  function validateConstraint(a) {
    var b = 0;
    var c = qsi(a.field);
    if (c === null) {
      c = qsn(a.field);
    }
    if (c !== null) {
      var d = c.val();
      for (var e of a.rules) {
        var f = validators[e.type];
        if (!!f) {
          if (!f(d, e)) {
            addErrorRule(c, e);
            b++;
            break;
          }
        } else {
          console.error("rule " + e.type + " undefined");
        }
      }
    } else {
      console.error("field " + a.field + " not found");
    }

    return b;
  }

  function validate(a) {
    var b = 0;
    cleanErrors();
    for (var c of a) {
      b += validateConstraint(c);
    }
    return b === 0;
  }
  exports.addMsg = addMsg;
  exports.addInfo = addInfo;
  exports.addWarning = addWarning;
  exports.addError = addError;
  exports.removeMsg = removeMsg;
  exports.validate = validate;
  exports.cleanErrors = cleanErrors;
  exports.config = config;
});