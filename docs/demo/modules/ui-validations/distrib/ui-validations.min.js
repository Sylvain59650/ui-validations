(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.uiValidations = mod.exports;
  }
})(this, function (exports) {
  "use strict";

  var config = {
    placement: "bottom-left",
    MSGS: {
      required: "Le champ [[name]] est requis",
      minlength: "Le champ [[name]] doit comporter au moins [[]] caract√®res"
    }
  };

  function getId(input) {
    if (input.id) {
      return input.id;
    };
    input.id = input.name;
    return input.name;
  }

  function addMsg(input, msg, cssClass) {
    if (config.placement === "tooltip") {
      input.oldTitle = input.title;
      input.title = msg;
    } else {
      var label = newElement("label", { id: getId(input) + "_msg", for: getId(input), class: "field-validation " + cssClass }, msg);
      input.afterEnd(label);
      Positionizer.setRelativePosition(input, label, "bottom-left");
    }
    input.addClass(cssClass);
  }

  function removeMsg(input) {
    var id = getId(input) + "_msg";
    var label = qsi(id);
    if (label !== null) {
      label.remove(label);
    }
    input.class("-info -warning -error");
  }

  function cleanErrors() {
    qsa(".field-validation").remove();
    var inputs = qsa(".error");
    inputs.class("-info -warning -error");
    inputs.attr("title", "");
  }

  function addError(input, msg) {
    addMsg(input, msg, "error");
  }

  function addWarning(input, msg) {
    addMsg(input, msg, "warning");
  }

  function addInfo(input, msg) {
    addMsg(input, msg, "info");
  }

  function addErrorRule(input, rule) {
    var msg = getMsg(input, rule);
    addError(input, msg);
  }

  function getMsg(field, rule) {
    if (rule.msg) {
      return rule.msg;
    };
    var msg = "";
    var labelField = qs("[for='" + field.name + "']");
    if (config.MSGS[rule.type]) {
      msg = config.MSGS[rule.type];
    } else {
      msg = "error";
    }
    var fieldName = labelField != null ? labelField.text() : "";
    msg = msg.replace("[[name]]", fieldName);
    return msg;
  }

  function not(fn) {
    return !fn(arguments[1], arguments[2]);
  }

  validators.required = function () {
    return not.apply(undefined, [validators.isEmpty].concat(Array.prototype.slice.call(arguments)));
  };

  function validateConstraint(constraint) {
    var err = 0;
    var field = qsi(constraint.field);
    if (field === null) {
      field = qsn(constraint.field);
    }
    if (field !== null) {
      var value = field.val();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = constraint.rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var rule = _step.value;

          var fn = validators[rule.type];
          if (!!fn) {
            if (!fn(value, rule)) {
              addErrorRule(field, rule);
              err++;
              break;
            }
          } else {
            console.error("rule " + rule.type + " undefined");
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else {
      console.error("field " + constraint.field + " not found");
    }

    return err;
  }

  function validate(constraints) {
    var err = 0;
    cleanErrors();
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = constraints[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var constraint = _step2.value;

        err += validateConstraint(constraint);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return err === 0;
  }
  exports.addMsg = addMsg;
  exports.addInfo = addInfo;
  exports.addWarning = addWarning;
  exports.addError = addError;
  exports.removeMsg = removeMsg;
  exports.validate = validate;
  exports.cleanErrors = cleanErrors;
  exports.config = config;
});